---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: grafana-pv
  labels:
    app: grafana
spec:
  storageClassName: manual
  capacity:
    storage: 200Mi
  accessModes:
    - ReadWriteOnce
  hostPath:  # where pesistent volume is created on the kubernetes node
    path: "/grafana_data"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 200Mi
  selector:
    matchLabels:
      app: grafana
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources-cm
data:
  datasources.yaml: |-
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus-operated:9090
        isDefault: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-cm
data:
  dashboards.yaml: |-
    apiVersion: 1

    providers:
      - name: Kube Cluster Dashboard
        folder: Readonly
        type: file
        options:
          path:
            # Default path for Linux is: /var/lib/grafana/dashboards
            /etc/grafana/default-dashboards/dashboard-cluster.json
      - name: Django
        folder: Readonly
        type: file
        options:
          path:
            /etc/grafana/default-dashboards/dashboard-django.json
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 0
        supplementalGroups:
          - 0
      containers:
        - name: grafana
          image: grafana/grafana:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-grafana
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /robots.txt
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 3000
            timeoutSeconds: 1
          resources:
            limits:
              cpu: 300m
              memory: 500Mi
            requests:
              memory: 200Mi
              cpu: 40m
          volumeMounts:
            - name: grafana-volume-mount
              mountPath: /var/lib/grafana
            - name: provisioning-datasources-mount
              mountPath: /etc/grafana/provisioning/datasources
            - name: provisioning-dashboards-mount
              mountPath: /etc/grafana/provisioning/dashboards
            - name: default-dashboards-mount
              mountPath: /etc/grafana/default-dashboards
      volumes:
        - name: grafana-volume-mount
          persistentVolumeClaim:
            claimName: grafana-pvc
        - name: provisioning-datasources-mount
          configMap:
            name: grafana-datasources-cm
        - name: provisioning-dashboards-mount
          configMap:
            name: grafana-dashboards-cm
        - name: default-dashboards-mount
          configMap:
            name: default-dashboards  # generated by kustomize
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  type: ClusterIP  # Can be overriden to NodePort in overlays
  sessionAffinity: None
  selector:
    app: grafana
  ports:
    - port: 3000
      protocol: TCP
      targetPort: http-grafana
---
apiVersion: gateway.networking.k8s.io/v1
kind: HTTPRoute
metadata:
  name: grafana-httproute
  annotations:
    # Exclude HTTPRoute from aserver-side apply.
    # See bug https://github.com/argoproj/argo-cd/issues/22151
    argocd.argoproj.io/sync-options: ServerSideApply=false

    # Will run in wave 2:
    # Wave 0: create cert-manager
    # Wave 1: crate Issuer
    argocd.argoproj.io/sync-wave: "2"
spec:
  parentRefs:
  - name: ufo-gateway
  # hostnames:
  # - "grafana.vybory.live"
  rules:
  - matches:
    - path:
        type: PathPrefix
        value: /
    backendRefs:
    - name: grafana
      port: 3000
